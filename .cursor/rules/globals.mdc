---
description: 
globs: 
alwaysApply: true
---
# Your rule content

- You can @ files here
- You can use markdown but dont have to

---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された**守るべきルールのディレクトリ/ファイル**を必ずチェックしてください。
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```
   
---

6. **守るべきルールのディレクトリ/ファイル**

   - ./cursor/rules/dev-rules/*.mdc 
   - 上記ファイルのルールを厳守してください。

---

7. タスク・進捗管理（長期プロジェクト対応版）

   ## 7.1 ディレクトリ構造

   ```
   tasks/
   ├── index.md          # マスターインデックス（全タスク一覧）
   ├── active/           # アクティブタスク
   │   ├── 2024-01/     # 月別ディレクトリ
   │   │   ├── task-001-api-design.md
   │   │   └── task-002-db-schema.md
   │   └── 2024-02/
   ├── completed/        # 完了タスク（アーカイブ）
   │   └── 2024-01/
   ├── on-hold/         # 保留中タスク
   └── templates/       # タスクテンプレート
       └── task-template.md
   
   worklog/              # 作業ログ
   └── YYYYMMDD-{ID}-{概要}.md
   ```

   ## 7.2 タスクID体系
   - **フォーマット**: YYMMDD-XXX（例: 240110-001）
   - **採番ルール**: 日付ごとに001から連番
   - **一意性保証**: 日付を含むことで重複を防止
   - **ファイル名**: task-YYMMDD-XXX-{内容要約}.md（例: task-240110-001-api-auth.md）

   ## 7.3 マスターインデックス形式（tasks/index.md）

   ```markdown
   # タスクマスターインデックス

   最終更新: YYYY-MM-DD HH:MM

   ## 📊 サマリー
   - アクティブ: XX
   - 完了: XXX
   - 保留: X
   - 合計: XXX

   ## 🔴 緊急タスク（優先度: 最高）
   | ID | タスク名 | 担当 | 期限 | ステータス | 詳細 |
   |----|---------|------|------|-----------|------|
   | YYMMDD-XXX | タスク名 | 担当者 | YYYY-MM-DD | 進行中(XX%) | [詳細](./active/YYYY-MM/task-YYMMDD-XXX-name.md) |

   ## 🟡 重要タスク（優先度: 高）
   | ID | タスク名 | 開始日 | 進捗 | 詳細 |
   |----|---------|--------|------|------|
   | YYMMDD-XXX | タスク名 | YYYY-MM-DD | XX% | [詳細](./active/YYYY-MM/task-YYMMDD-XXX-name.md) |

   ## 🟢 通常タスク（優先度: 中）
   [アクティブタスク一覧へ](./active/)

   ## ✅ 直近の完了タスク（過去7日間）
   | ID | タスク名 | 完了日 | 工数 | ログ |
   |----|---------|--------|------|------|
   | YYMMDD-XXX | タスク名 | YYYY-MM-DD | Xh | [ログ](../worklog/YYYYMMDD-XXX-{概要}.md) |
   ```

   ## 7.4 個別タスクファイル形式

   ```markdown
   # Task: [タスク名]

   ## メタデータ
   - **ID**: YYMMDD-XXX
   - **作成日**: YYYY-MM-DD
   - **更新日**: YYYY-MM-DD HH:MM
   - **優先度**: 🔴緊急 / 🟡重要 / 🟢通常 / ⚪低
   - **ステータス**: 未着手 / 進行中 / 完了 / 保留
   - **進捗**: XX%
   - **見積工数**: XXh
   - **実績工数**: XXh
   - **担当**: [担当者名]

   ## 概要
   [タスクの概要を記述]

   ## 依存関係
   - 前提: [YYMMDD-XXX] タスク名（ステータス）
   - ブロック: [YYMMDD-XXX] タスク名

   ## 作業内容
   - [ ] サブタスク1
   - [ ] サブタスク2
   - [ ] サブタスク3

   ## 進捗ログ
   <!-- ここに作業中の進捗や課題を随時追記 -->
   - YYYY-MM-DD HH:MM: [進捗内容、発生した課題、解決策など]
   - YYYY-MM-DD HH:MM: [進捗内容]

   ## 技術メモ
   [実装に関する技術的な詳細]

   ## 関連ファイル
   - [ファイルパス]
   - [ファイルパス]

   ## 作業ログ
   <!-- 完了した作業のworklogへのリンク -->
   - [YYYY-MM-DD: 作業内容](../../worklog/YYYYMMDD-XXX-{概要}.md)
   ```

   ## 7.5 作業ログ形式（worklog/）

   ```markdown
   # 作業ログ: [タスクID] - [タスク概要]

   ## 作業情報
   - **タスクID**: YYMMDD-XXX（タスクがある場合）
   - **作業種別**: タスク作業 / 緊急対応 / 短時間作業
   - **開始日時**: YYYY-MM-DD HH:MM:SS
   - **完了日時**: YYYY-MM-DD HH:MM:SS
   - **所要時間**: X時間Y分
   - **担当**: AI Assistant

   ## 実施内容
   ### 実装・作業内容
   - [最終的に何を達成したか]
   - [具体的な成果物]

   ### 変更ファイル
   - `path/to/file1.ts`: [変更内容]
   - `path/to/file2.tsx`: [変更内容]

   ## 検証結果
   - ✅ [検証項目1]: [結果]
   - ✅ [検証項目2]: [結果]

   ## 課題・申し送り事項
   - [次回作業時の注意点]
   - [未解決の課題]

   ## 関連リンク
   - タスク詳細: [../tasks/active/YYYY-MM/task-YYMMDD-XXX-name.md]（該当する場合）
   - PR/コミット: [リンク]
   ```

   ## 7.6 運用ルール

   ### タスク作成基準
   - **タスクファイル作成が必要**：
     - 見積30分以上の作業
     - 複数ファイルにまたがる作業
     - 複数日にまたがる作業
     - 計画的な設計が必要な作業
   
   - **worklogのみでOK**：
     - 30分未満の短時間作業
     - 単純なバグ修正
     - ドキュメントの軽微な修正
     - 緊急対応

   ### タスク作成時
   1. 新しいタスクIDを採番（YYMMDD-XXX形式）
   2. `tasks/active/YYYY-MM/`配下にタスクファイルを作成
   3. ファイル名: `task-YYMMDD-XXX-{内容要約}.md`
   4. `tasks/index.md`に新規エントリを追加

   ### 作業中
   1. **進捗や課題はタスクファイルの進捗ログに随時追記**
   2. ステータスと進捗率を更新
   3. サブタスクのチェックボックスを更新
   4. 重要な変更はindex.mdにも反映

   ### 作業完了時
   1. 作業ログファイルを`worklog/`に作成（最終成果を記録）
   2. **1つのタスクに複数のworklog作成も可能**（段階的な完了時）
   3. タスクファイルに作業ログへのリンクを追加
   4. タスク完全完了時は`completed/YYYY-MM/`へ移動

   ### 定期メンテナンス
   - **AIによるリマインド**：
     - 「進捗状況は？」→ 現在のタスク状況をサマリー
     - 「今日もお疲れ様でした」→ 本日の作業ログを確認・整理
     - 「今日もよろしく」→ 本日の予定タスクを確認
   - **週次**: 完了タスクのアーカイブ確認
   - **月次**: 古いタスクの整理、統計情報の更新

   ## 7.7 優先度の定義
   - 🔴 **緊急**: 24時間以内に対応が必要
   - 🟡 **重要**: 3日以内に着手すべき
   - 🟢 **通常**: 計画的に進める
   - ⚪ **低**: 余裕があるときに対応

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。

---

8. Gitコミットメッセージ規約

   ## 8.1 コミットメッセージ形式

   ```
   <type>(<scope>): <subject>

   <body>

   <footer>
   ```

   ## 8.2 Type（必須）
   - **feat**: 新機能
   - **fix**: バグ修正
   - **docs**: ドキュメントのみの変更
   - **style**: コードの意味に影響しない変更（空白、フォーマット、セミコロン等）
   - **refactor**: バグ修正や機能追加を伴わないコード変更
   - **perf**: パフォーマンス改善
   - **test**: テストの追加・修正
   - **chore**: ビルドプロセスやツールの変更
   - **ci**: CI設定の変更
   - **revert**: 以前のコミットの取り消し

   ## 8.3 Scope（任意）
   変更の影響範囲を括弧内に記載：
   - コンポーネント名: `(Button)`, `(Header)`
   - 機能名: `(auth)`, `(api)`, `(db)`
   - ファイル名: `(globals.mdc)`, `(README)`

   ## 8.4 Subject（必須）
   - **50文字以内**で変更内容を要約
   - 現在形・命令形で記述（"Add" not "Added"）
   - 文頭を大文字にしない
   - 文末にピリオドを付けない
   - 日本語の場合は「〜を追加」「〜を修正」の形式

   ## 8.5 Body（推奨）
   - **変更の理由**（Why）を説明
   - **変更前後の挙動**の違いを説明
   - 72文字で改行
   - 箇条書きも可

   ## 8.6 Footer（必要時）
   - **Breaking Changes**: `BREAKING CHANGE: 説明`
   - **Issue参照**: `Closes #123`, `Fixes #456`
   - **タスクID参照**: `Task: 240110-001`

   ## 8.7 コミットメッセージ例

   ### シンプルな例
   ```
   fix(auth): JWT有効期限の検証ロジックを修正
   ```

   ### 詳細な例
   ```
   feat(api): ユーザープロフィール更新エンドポイントを追加

   - PUT /api/users/:id/profile を実装
   - アバター画像のアップロード機能を含む
   - 入力値のバリデーションを実装

   Task: 240110-015
   ```

   ### Breaking Changeの例
   ```
   refactor(api)!: 認証APIのレスポンス形式を変更

   従来のtoken文字列から、オブジェクト形式に変更：
   - Before: "eyJhbGc..."
   - After: { token: "eyJhbGc...", expiresIn: 3600 }

   BREAKING CHANGE: APIクライアントの更新が必要です
   Closes #234
   ```

   ## 8.8 生成時の注意事項
   - git diffの内容から**最も重要な変更**を特定
   - 複数の変更がある場合は**主要な変更**にフォーカス
   - 技術的な詳細よりも**ビジネス的な影響**を優先
   - コミットは**論理的な単位**でまとめる

---

9. プルリクエスト（PR）メッセージ規約

   ## 9.1 PR作成の心構え
   **レビュアーの時間を最大限尊重する**
   - レビュアーが最小限の時間で理解できるよう構成
   - 重要な情報を最初に配置
   - 視覚的に分かりやすいフォーマット使用

   ## 9.2 PRタイトル形式
   ```
   [Type] 簡潔な変更内容の要約 (#タスクID)
   ```
   
   例：
   - `[Feature] ユーザープロフィール編集機能を追加 (#240110-015)`
   - `[Fix] JWT認証のタイムアウトエラーを修正 (#240110-023)`
   - `[Refactor] 認証ロジックをサービス層に分離 (#240110-031)`

   ## 9.3 PRテンプレート

   ```markdown
   ## 📋 概要
   <!-- 2-3文で変更の概要を説明 -->
   
   ## 🎯 目的・背景
   <!-- なぜこの変更が必要なのか -->
   - 解決する課題：
   - 期待される効果：
   
   ## 🔧 変更内容
   <!-- 技術的な変更点を箇条書きで -->
   - [ ] 変更点1
   - [ ] 変更点2
   - [ ] 変更点3
   
   ## 📸 スクリーンショット/動作確認
   <!-- UI変更の場合は必須 -->
   | Before | After |
   |--------|-------|
   | ![before](url) | ![after](url) |
   
   ## 🧪 テスト内容
   - [ ] ユニットテスト追加/更新
   - [ ] 統合テスト実施
   - [ ] 手動テスト完了
   
   ### テスト手順
   1. 手順1
   2. 手順2
   3. 期待される結果
   
   ## 📊 影響範囲
   - **影響を受ける機能**：
   - **データベース変更**：あり/なし
   - **API変更**：あり/なし
   - **破壊的変更**：あり/なし
   
   ## ✅ レビューポイント
   <!-- レビュアーに特に見てほしい箇所 -->
   1. `src/auth/jwt.service.ts` - トークン有効期限の妥当性
   2. エラーハンドリングの実装方法
   3. パフォーマンスへの影響
   
   ## 📚 関連情報
   - タスク: #240110-015
   - Issue: #123
   - 設計書: [リンク]
   - 参考記事: [リンク]
   
   ## 🚀 デプロイ時の注意事項
   <!-- ある場合のみ記載 -->
   - [ ] 環境変数の追加が必要
   - [ ] マイグレーションの実行が必要
   - [ ] キャッシュのクリアが必要
   ```

   ## 9.4 PR作成時のチェックリスト
   ### コード品質
   - [ ] コードが自己文書化されている
   - [ ] 適切なコメントを追加した
   - [ ] 不要なconsole.logやデバッグコードを削除した
   - [ ] リンターエラーがない
   
   ### レビュー準備
   - [ ] 自分でコードレビューを実施した
   - [ ] 差分が適切なサイズ（400行以下推奨）
   - [ ] コミットが論理的に分割されている
   - [ ] PR説明が十分に詳しい
   
   ### テスト
   - [ ] テストが全てパスしている
   - [ ] 新機能にテストを追加した
   - [ ] エッジケースを考慮した

   ## 9.5 レビュアーフレンドリーなPRのコツ
   
   ### 1. 差分を小さく保つ
   - 1つのPRは1つの目的に集中
   - 大きな変更は段階的に分割
   - リファクタリングと機能追加を分離
   
   ### 2. コンテキストを提供
   - 「なぜ」この変更が必要かを明確に
   - 代替案を検討した場合は記載
   - 技術的な判断の根拠を説明
   
   ### 3. レビューの誘導
   - 重要な変更箇所を明示
   - 懸念事項があれば事前に共有
   - 質問したいポイントを明確に
   
   ### 4. 視覚的な配慮
   - マークダウンで見やすく整形
   - 絵文字で視認性を向上
   - 表やリストを活用
   
   ## 9.6 PR説明の悪い例と良い例
   
   ### ❌ 悪い例
   ```
   バグ修正
   
   JWT周りを修正しました。
   ```
   
   ### ✅ 良い例
   ```
   ## 📋 概要
   JWT認証でトークン有効期限切れ後もリクエストが通ってしまうバグを修正
   
   ## 🎯 目的・背景
   - 解決する課題：有効期限切れトークンでも認証が通過する重大なセキュリティ問題
   - 期待される効果：適切なタイミングでの認証エラーによるセキュリティ向上
   
   ## 🔧 変更内容
   - [x] トークン検証時に有効期限チェックを追加
   - [x] 期限切れ時の適切なエラーレスポンス実装
   - [x] 関連するユニットテストを追加
   ```